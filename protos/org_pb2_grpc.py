# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import audit_pb2 as audit__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import org_pb2 as org__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in org_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OrgStub(object):
    """Client facing interface of Link to Last Lock link
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListDeviceSummaries = channel.unary_unary(
                '/org.Org/ListDeviceSummaries',
                request_serializer=org__pb2.ListDevicesRequest.SerializeToString,
                response_deserializer=org__pb2.DeviceSummaries.FromString,
                _registered_method=True)
        self.StreamDeviceSummaries = channel.unary_stream(
                '/org.Org/StreamDeviceSummaries',
                request_serializer=org__pb2.ListDevicesRequest.SerializeToString,
                response_deserializer=org__pb2.DeviceSummaries.FromString,
                _registered_method=True)
        self.ListAudits = channel.unary_unary(
                '/org.Org/ListAudits',
                request_serializer=org__pb2.ListAuditsRequest.SerializeToString,
                response_deserializer=org__pb2.Audits.FromString,
                _registered_method=True)
        self.StreamAudits = channel.unary_stream(
                '/org.Org/StreamAudits',
                request_serializer=org__pb2.ListAuditsRequest.SerializeToString,
                response_deserializer=audit__pb2.ReceivedAudit.FromString,
                _registered_method=True)
        self.Assign = channel.unary_unary(
                '/org.Org/Assign',
                request_serializer=org__pb2.AssignmentsRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.SetOrgKeys = channel.unary_unary(
                '/org.Org/SetOrgKeys',
                request_serializer=org__pb2.OrganizationKeys.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class OrgServicer(object):
    """Client facing interface of Link to Last Lock link
    """

    def ListDeviceSummaries(self, request, context):
        """List device summaries
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamDeviceSummaries(self, request, context):
        """Stream devices summaries
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAudits(self, request, context):
        """List audits
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamAudits(self, request, context):
        """Stream audits
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Assign(self, request, context):
        """Assign credentials to a device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetOrgKeys(self, request, context):
        """Set keys for the organization
        This needs to be re-called on provision of devices
        This requirement will be removed in release 1.3
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListDeviceSummaries': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDeviceSummaries,
                    request_deserializer=org__pb2.ListDevicesRequest.FromString,
                    response_serializer=org__pb2.DeviceSummaries.SerializeToString,
            ),
            'StreamDeviceSummaries': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamDeviceSummaries,
                    request_deserializer=org__pb2.ListDevicesRequest.FromString,
                    response_serializer=org__pb2.DeviceSummaries.SerializeToString,
            ),
            'ListAudits': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAudits,
                    request_deserializer=org__pb2.ListAuditsRequest.FromString,
                    response_serializer=org__pb2.Audits.SerializeToString,
            ),
            'StreamAudits': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamAudits,
                    request_deserializer=org__pb2.ListAuditsRequest.FromString,
                    response_serializer=audit__pb2.ReceivedAudit.SerializeToString,
            ),
            'Assign': grpc.unary_unary_rpc_method_handler(
                    servicer.Assign,
                    request_deserializer=org__pb2.AssignmentsRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SetOrgKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.SetOrgKeys,
                    request_deserializer=org__pb2.OrganizationKeys.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.Org', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('org.Org', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Org(object):
    """Client facing interface of Link to Last Lock link
    """

    @staticmethod
    def ListDeviceSummaries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/org.Org/ListDeviceSummaries',
            org__pb2.ListDevicesRequest.SerializeToString,
            org__pb2.DeviceSummaries.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamDeviceSummaries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/org.Org/StreamDeviceSummaries',
            org__pb2.ListDevicesRequest.SerializeToString,
            org__pb2.DeviceSummaries.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListAudits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/org.Org/ListAudits',
            org__pb2.ListAuditsRequest.SerializeToString,
            org__pb2.Audits.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamAudits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/org.Org/StreamAudits',
            org__pb2.ListAuditsRequest.SerializeToString,
            audit__pb2.ReceivedAudit.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Assign(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/org.Org/Assign',
            org__pb2.AssignmentsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetOrgKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/org.Org/SetOrgKeys',
            org__pb2.OrganizationKeys.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
